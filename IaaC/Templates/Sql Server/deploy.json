{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sqlservername": {
      "type": "string",
      "metadata": {
        "description": "Name of sql server"
      }
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "The admin user of the SQL Server"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the admin user of the SQL Server"
      }
    },
    "allowAzureIps": {
      "type": "bool",
      "metadata": {
        "description": "Allow Azure services and resources to access this server"
      },
      "defaultValue": true
    },
    "enableADS": {
      "type": "bool",
      "metadata": {
        "description": "Enable Advanced Data Security for SQL / Enable Azure defender"
      },
      "defaultValue": true
    },
    //If we're giving start and end IP as 0.0.0.0, it will set the firewall to be on by default.
    //If you're giving start and end IP as 255.255.255.255, it will set the firewall to be off by default.
    "firewallIpAddresses": {
      "type": "Array",
      "metadata": {
        "description": "IP addresses"
      },
      "defaultValue": [
          {
          "start": "0.0.0.0",
          "end": "0.0.0.0",
          "clientName": "Test1"
        }
      ]
    },
    "resourcelocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "connectionPolicyType": {
      "type": "string",
      "metadata": {
        "description": "The sql server policy connection type. - Default, Proxy, Redirect"
      },
      "allowedValues": [
        "Default",
        "Proxy",
        "Redirect"
      ],
      "defaultValue":"Default"
    },
    "publicNetworkAccess": {
      "type": "string",
      "metadata": {
        "description": "Whether or not sql server public endpoint access is allowed for this server."
      },
      "allowedValues": [ "Enabled", "Disabled" ],
      "defaultValue":"Enabled"
    },
    "sqlServerNameStorageAccountName": {
      "type": "string",
      "minLength":3,
      "maxLength":24
    }
  },
  "functions": [],
  "variables": {
    "serverResourceGroupName": "[resourceGroup().name]",
    "subscriptionId": "[subscription().subscriptionId]",
    "uniqueStorage": "[uniqueString(variables('subscriptionId'), variables('serverResourceGroupName'), parameters('resourcelocation'))]",
    "storageName": "[tolower(parameters('sqlServerNameStorageAccountName'))]",
    "uniqueRoleGuid": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), variables('storageBlobContributor'), resourceId('Microsoft.Sql/servers', parameters('sqlservername')))]",
    "StorageBlobContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]"
  },
  "resources": [
    {
      "name": "[parameters('sqlservername')]",
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2019-06-01-preview",
      "location": "[parameters('resourcelocation')]",
      "identity": "[if(parameters('enableADS'), json('{\"type\":\"SystemAssigned\"}'), json('null'))]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
        "version": "12.0",
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
      }
    },
    {
      "condition": "[and(parameters('allowAzureIPs'),equals(parameters('publicNetworkAccess'),'Enabled'))]",
      "name": "[concat(parameters('sqlservername'),'/',parameters('firewallIpAddresses')[copyIndex()].clientName)]",
      "type": "Microsoft.Sql/servers/firewallrules",
      "apiVersion": "2014-04-01",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlservername'))]"
      ],
      "location": "[parameters('resourcelocation')]",
      "properties": {
        "startIpAddress": "[parameters('firewallIpAddresses')[copyIndex('firewallrulecopy')].start]",
        "endIpAddress": "[parameters('firewallIpAddresses')[copyIndex('firewallrulecopy')].end]"
      },
      "copy": {
        "name": "firewallRuleCopy",
        "count": "[length(parameters('firewallIpAddresses'))]"
      }
    },
    {
      //Sql Connection Policy.
      "type": "Microsoft.Sql/servers/connectionPolicies",
      "apiVersion": "2014-04-01",
      "name": "[concat(parameters('sqlservername'),'/','Default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlservername'))]"
      ],
      "properties": {
        "connectionType": "[parameters('connectionPolicyType')]"
      }
    },
    {
      //Enable/Disable Advanced Data Security, the user deploying the template must have an administrator or owner permissions.
      //This resource does not have any stable version
      "condition": "[parameters('enableADS')]",
      "name": "[concat(parameters('sqlservername'),'/','Default')]",
      "type": "Microsoft.Sql/servers/securityAlertPolicies",
      "apiVersion": "2020-02-02-preview",
      "location": "[parameters('resourcelocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlservername'))]"
      ],
      "properties": {
        //Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database
        "state": "Enabled",
        "emailAccountAdmins": true
      }
    },
    {
      //Enable/Disable Azure Defender for SQL, Protect your data using Azure Defender for SQL, a unified security package including vulnerability assessment and advanced threat protection for your server.
      //This resource does not have any stable version
      //In order to enable VulnerabilityAssesments, have to enable first Advance data Security.
      "condition": "[parameters('enableADS')]",
      "name": "[concat(parameters('sqlservername'),'/','Default')]",
      "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
      "apiVersion": "2018-06-01-preview",
      "properties": {
        "storageContainerPath": "[if(and(parameters('enableADS'),not(empty(parameters('sqlServerNameStorageAccountName')))), concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))).primaryEndpoints.blob, 'vulnerability-assessment'), json('null'))]",
        "recurringScans": {
          "isEnabled": true,
          "emailSubscriptionAdmins": true,
          "emails": []
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlservername'))]",
        "[concat('Microsoft.Sql/servers/', parameters('sqlservername'), '/securityAlertPolicies/Default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ]
    },
     {
       "condition": "[parameters('enableADS')]",
       "type": "Microsoft.Storage/storageAccounts",
       "apiVersion": "2019-06-01",
       "name": "[variables('storageName')]",
       "location": "[parameters('resourcelocation')]",
       "sku": {
         "name": "Standard_LRS"
       },
       "kind": "StorageV2"
     }
    //{
    //  "comments": "Providing Role assign to Storage blob Container",
    //  "condition": "[parameters('enableADS')]",
    //  "type": "Microsoft.Authorization/roleAssignments",
    //  "apiVersion": "2020-04-01-preview",
    //  "name": "[variables('uniqueRoleGuid')]",
    //  "dependsOn": [
    //    "[resourceId('Microsoft.Sql/servers', parameters('sqlservername'))]",
    //    "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
    //  ],
    //  "properties": {
    //    "roleDefinitionId": "[variables('StorageBlobContributor')]",
    //    "principalId": "[reference(resourceId('Microsoft.Sql/servers', parameters('sqlservername')), '2019-06-01-preview', 'Full').identity.principalId]",
    //    "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
    //    "principalType": "ServicePrincipal"
    //  }
    //}
  ],
  "outputs": {
    "sqlserverresourceid": {
      "type": "string",
      "value": "[resourceId('Microsoft.Sql/servers',parameters('sqlservername'))]"
    },
    "sqlserveroutput": {
      "type": "object",
      "value": "[reference(concat('Microsoft.Sql/servers','/',parameters('sqlservername')),'2014-04-01','Full')]"
    }
  }
}